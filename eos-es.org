#+TITLE: EOS: Elasticsearch Module
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+PROPERTY: header-args:sh :eval no

#+BEGIN_SRC emacs-lisp
(provide 'eos-es)
#+END_SRC

* Elasticsearch

#+BEGIN_SRC emacs-lisp
(use-package es-mode
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("\\.es$" . es-mode))
  :config
  (setq es-warn-on-delete-query nil))
#+END_SRC

** Documentation for Elasticsearch

I occasionally use =helm-dash= to access the documentation for Elasticsearch
(and Java)

#+BEGIN_SRC emacs-lisp
(use-package helm-dash
  :ensure t)
#+END_SRC

* Logstash

There's a nice mode for logstash configurations that seems to work pretty well,
so I install that

#+BEGIN_SRC emacs-lisp
(use-package logstash-conf
  :ensure t)
#+END_SRC

* ES Services started and Run from Emacs

I basically use this to start up ES when I need to test something really quickly

I have been trying out [[https://www.npmjs.com/package/esvm][esvm]] for this lately also, check out my ESVM
configuration elsewhere in my dotfiles

So I configure prodigy like so:

#+BEGIN_SRC emacs-lisp
(use-package prodigy
  :ensure t
  :defer t
  :config
  (setq prodigy-services '())
  (prodigy-define-service
    :name "ES 2.2 release"
    :cwd "~/ies/"
    :command "esvm"
    :tags '(work test es)
    :port 9200)

  (prodigy-define-service
    :name "ES 2.x, 3 nodes"
    :cwd "~/ies/"
    :command "esvm"
    :args '("3node")
    :tags '(work test es)
    :port 9200)

  (prodigy-define-service
    :name "ES 2.x, 2 nodes"
    :cwd "~/ies/"
    :command "esvm"
    :args '("2node")
    :tags '(work test es)
    :port 9200)

  (prodigy-define-service
    :name "ES master branch"
    :cwd "~/ies/"
    :command "esvm"
    :args '("master")
    :tags '(work test es)
    :port 9200)

  (prodigy-define-service
    :name "Kibana 4.4.0"
    :cwd "~/ies/kibana-4.4.0-linux-x64"
    :command "~/ies/kibana-4.4.0-linux-x64/bin/kibana"
    :tags '(work kibana)
    :port 5601)

  (prodigy-define-service
    :name "Elasticsearch 1.7.5"
    :cwd "~/ies/elasticsearch-1.7.5"
    :command "~/ies/elasticsearch-1.7.5/bin/elasticsearch"
    :tags '(work test es)
    :port 9200)
  (prodigy-define-service
    :name "Elasticsearch 2.1.2"
    :cwd "~/ies/elasticsearch-2.1.2"
    :command "~/ies/elasticsearch-2.1.2/bin/elasticsearch"
    :tags '(work test es)
    :port 9200)
  (prodigy-define-service
    :name "Elasticsearch 2.2.2"
    :cwd "~/ies/elasticsearch-2.2.2"
    :command "~/ies/elasticsearch-2.2.2/bin/elasticsearch"
    :tags '(work test es)
    :port 9200)
  (prodigy-define-service
    :name "Elasticsearch 2.3.0"
    :cwd "~/ies/elasticsearch-2.3.0"
    :command "~/ies/elasticsearch-2.3.0/bin/elasticsearch"
    :tags '(work test es)
    :port 9200)
  (prodigy-define-service
    :name "ES gradle run"
    :cwd "~/es/elasticsearch"
    :command "gradle"
    :args '("run")
    :tags '(work es)
    :port 9200))
#+END_SRC

* ESVM configuration

I've been using [[https://github.com/simianhacker/esvm][esvm]] for managing starting up multiple ES nodes when I need to
test something using the rest API. Here's my configuration for it that tangles
and installs into =~/.esvmrc=

Here is the branch with the latest release I use:

#+NAME: es-branch
#+BEGIN_SRC json :tangle no
2.x
#+END_SRC

#+BEGIN_SRC js :tangle out/esvmrc
{
  "clusters": {
    "<<es-branch>>": {
      "branch": "<<es-branch>>",
      "nodes": 1
    },
    "2node": {
      "branch": "<<es-branch>>",
      "nodes": 2
    },
    "3node": {
      "branch": "<<es-branch>>",
      "nodes": 3
    },
    "master": {
      "branch": "master",
      "nodes": 1
    }
  },
  "defaults": {
    "config": {
      "cluster.name": "es-lee",
      "node.add_id_to_custom_path": false,
      "path.repo": "/tmp",
      "path.shared_data": "/tmp",
      "script.indexed": "on",
      "script.inline": "on"
    },
    "plugins": []
  }
}
#+END_SRC

And to install it:

#+BEGIN_SRC sh :tangle sh/install-esvmrc.sh
ln -sfv out/esvmrc ~/.esvmrc
#+END_SRC
