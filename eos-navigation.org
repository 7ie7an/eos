#+TITLE: EOS: Navigation
#+AUTHOR: Lee Hinman
#+EMAIL: lee@writequit.org
#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+PROPERTY: header-args:sh :eval no
#+HTML_HEAD: <link rel="stylesheet" href="https://dakrone.github.io/org2.css" type="text/css" />
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t
#+OPTIONS: skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP: fold nodlcheck lognotestate content

#+BEGIN_SRC emacs-lisp
(provide 'eos-navigation)
#+END_SRC

* General Emacs Navigation
:PROPERTIES:
:CUSTOM_ID: general-nav
:END:

These are miscellaneous bindings used all over the place that don't
really fit in anywhere else.

First, some window management and navigation helpers

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x +") 'balance-windows-area)

(global-set-key (kbd "C-c y") #'bury-buffer)
(global-set-key (kbd "C-c C-y") #'bury-buffer)
(global-set-key (kbd "C-c r") #'revert-buffer)

;; ==== Window switching ====
(defun eos/other-window-backwards ()
  (interactive)
  (other-window -1))

(global-set-key (kbd "M-'") #'other-window)
(global-set-key (kbd "M-\"") #'eos/other-window-backwards)
(global-set-key (kbd "H-'") #'other-window)
(global-set-key (kbd "H-\"") #'eos/other-window-backwards)
(global-set-key (kbd "<C-tab>") #'other-window)
(global-set-key (kbd "C-x C-o") #'other-window)
#+END_SRC

If you split buffers and have A on the left and B on the right, this will put B
on the left and A on the right. I actually use this more than I thought I
would...

#+BEGIN_SRC emacs-lisp
(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

(global-set-key (kbd "C-x 4 t") 'transpose-buffers)
#+END_SRC

Next, some of the random bindings that I use that don't really fit elsewhere.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-l") 'toggle-truncate-lines)

;; join on killing lines
(defun kill-and-join-forward (&optional arg)
  "If at end of line, join with following; otherwise kill line.
Deletes whitespace at join."
  (interactive "P")
  (if (and (eolp) (not (bolp)))
      (delete-indentation t)
    (kill-line arg)))

(global-set-key (kbd "C-k") 'kill-and-join-forward)

;; join line to next line
(global-set-key (kbd "M-j")
                (lambda ()
                  (interactive)
                  (join-line -1)))

;; Completion that uses many different methods to find options.
(global-set-key (kbd "M-/") 'hippie-expand)

;; Font size
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)

;; Start or switch to eshell
(global-set-key (kbd "C-x C-m") 'eshell)

;; If you want to be able to M-x without meta (phones, etc)
(global-set-key (kbd "C-c C-x") 'execute-extended-command)
#+END_SRC

** Isearch bindings
:PROPERTIES:
:CUSTOM_ID: isearch
:END:

#+BEGIN_SRC emacs-lisp
;; Use regex searches by default.
;;(global-set-key (kbd "C-s") 'isearch-forward-regexp)
;;(global-set-key (kbd "C-r") 'isearch-backward-regexp)
;; Case-fold regex by default
(setq search-default-mode 'character-fold-to-regexp)
;; Non regex search gets the meta also
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)

;; Activate occur easily inside isearch
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))

(defun eos/add-watchword (string)
  "Highlight whatever `string' is in the current buffer
permanently."
  (font-lock-add-keywords
   nil `((,(if isearch-regexp isearch-string (regexp-quote isearch-string))
          1 '((:background "yellow") (:weight bold)) t))))

(define-key isearch-mode-map (kbd "M-h")
  (lambda () (interactive)
    (eos/add-watchword
     (if isearch-regexp isearch-string (regexp-quote isearch-string)))))
#+END_SRC

* Mouse-based navigation
:PROPERTIES:
:CUSTOM_ID: mouse
:END:

Need to enable this to get trackpad scrolling to work on my Lenovo T450s

#+BEGIN_SRC emacs-lisp
;; mouse integration
(require 'mouse)
(xterm-mouse-mode t)
(global-set-key [mouse-4] '(lambda ()
                           (interactive)
                           (scroll-down 1)))
(global-set-key [mouse-5] '(lambda ()
                           (interactive)
                           (scroll-up 1)))
(setq mouse-sel-mode t)
(defun track-mouse (e))
#+END_SRC

* God-mode
:PROPERTIES:
:CUSTOM_ID: god-mode
:END:
God-mode was always something a little strange to me, halfway to =evil-mode=,
but not quite Emacs.

Lately though, I've begun using it because it allows me to do things I spend a
lot of time doing (navigating) without hitting control. This is especially
helpful because while I don't suffer from the so-called "Emacs-pinky", I am
instead suffering from "Emacs-thumb".

#+BEGIN_SRC emacs-lisp
(use-package god-mode
  :ensure t
  :disabled t
  :bind ("<escape>" . god-mode-all)
  :config
  (global-set-key (kbd "<escape>") 'god-mode-all)
  (define-key god-local-mode-map (kbd ".") 'repeat)
  (define-key god-local-mode-map (kbd "i") 'god-local-mode)
  (defun god-update-cursor ()
    "Update my cursor."
    (setq cursor-type
          (if god-local-mode
              'box
            'bar)))
  ;;(add-hook 'god-mode-enabled-hook 'god-update-cursor)
  ;;(add-hook 'god-mode-disabled-hook 'god-update-cursor)
  (add-to-list 'god-exempt-major-modes 'sauron-mode)
  (add-to-list 'god-exempt-major-modes 'eshell-mode)
  (add-to-list 'god-exempt-major-modes 'org-agenda-mode)
  (add-to-list 'god-exempt-major-modes 'mingus-playlist-mode)
  (add-to-list 'god-exempt-major-modes 'mingus-browse-mode)
  (add-to-list 'god-exempt-major-modes 'twittering-mode)
  (add-to-list 'god-exempt-major-modes 'Man-mode)
  (add-to-list 'god-exempt-major-modes 'proced-mode)
  (add-to-list 'god-exempt-major-modes 'gnus-summary-mode)
  (add-to-list 'god-exempt-major-modes 'gnus-article-mode)
  (add-to-list 'god-exempt-major-modes 'gnus-group-mode)
  (add-to-list 'god-exempt-major-modes 'elfeed-search-mode)
  (add-to-list 'god-exempt-major-modes 'haskell-interactive-mode)
  (add-to-list 'god-exempt-major-modes 'epresent-mode)
  (add-to-list 'god-exempt-major-modes 'compilation-mode)
  (add-to-list 'god-exempt-major-modes 'Custom-mode)
  ;; Finally, a fix for key-translation-map by redefining the
  ;; `key-string-after-consuming-key' method, courtesy of
  ;; https://github.com/chrisdone/god-mode/issues/75
  (defun key-string-after-consuming-key (key key-string-so-far)
    "Interpret god-mode special keys for key (consumes more keys
if appropriate). Append to keysequence."
    (let ((key-consumed t) next-modifier next-key)
      (message key-string-so-far)
      (setq next-modifier
            (cond
             ((string= key god-literal-key)
              (setq god-literal-sequence t)
              "")
             (god-literal-sequence
              (setq key-consumed nil)
              "")
             ((and
               (stringp key)
               (not (eq nil (assoc key god-mod-alist)))
               (not (eq nil key)))
              (cdr (assoc key god-mod-alist)))
             (t
              (setq key-consumed nil)
              (cdr (assoc nil god-mod-alist))
              )))
      (setq next-key
            (if key-consumed
                (god-mode-sanitized-key-string (read-event key-string-so-far))
              key))
      (let* ((literal-key-string (concat next-modifier next-key))
             (translation (lookup-key key-translation-map (kbd literal-key-string)))
             (next-interpreted-key-string (or translation literal-key-string)))
        (if key-string-so-far
            (concat key-string-so-far " " next-interpreted-key-string)
          next-interpreted-key-string)))))
#+END_SRC

* Navigating to recent buffers

This was actually stolen from
https://www.reddit.com/r/emacs/comments/4kv163/i_wanna_see_your_init_files_share_em/
and it sounded like a good idea, so I took it :)

#+BEGIN_SRC emacs-lisp
;; This is home-row for Dvorak - "aoeu htns"
;; On Qwerty it would be "asdf jkl;"
(defvar bswitch-map (list 1 "a" 2 "o" 3 "e" 4 "i" 5 "h" 6 "t" 7 "n" 8 "s"))

(setq bswitch-offset 10)
(setq bswitch-key-buffer-spacing 2)

(defun bswitch-repeat (number &optional str)
  (if (< number 1)
      str
    (bswitch-repeat (1- number) (concat " " str))))

(defun bswitch-get-beginning ()
  (bswitch-repeat (- (/ (window-body-width) 2) bswitch-offset)))

(defun bswitch-get-end (beg mid)
  (bswitch-repeat (- (window-body-width)
                     (+ (length mid)
                        (length beg)))))

(defun bswitch-get-header-display-line ()
  (let* ((beg (bswitch-get-beginning))
         (mid (concat "Key"
                      (bswitch-repeat
                       (+ -2 bswitch-key-buffer-spacing))
                      "Buffer"))
         (end (bswitch-get-end beg mid)))
    (concat beg mid end)))


(defun bswitch-get-buffer-display-line (index)
  (let* ((blist (buffer-list)))
    (if (< index (length blist))
        (let* ((beg (bswitch-get-beginning))
               (mid (concat (plist-get bswitch-map index)
                            (bswitch-repeat bswitch-key-buffer-spacing)
                            (buffer-name (nth index (buffer-list)))))
               (end (bswitch-get-end beg mid)))

          (concat beg mid end))
      (let* ((beg (bswitch-get-beginning))
             (mid (format "No buffer at index %s yet" index))
             (end (bswitch-get-end beg mid)))
        (concat beg mid end)))))

(defun bswitch-switch (index)
  (if (< index (length (buffer-list)))
      (switch-to-buffer (nth index (buffer-list)))
    (message "Cannot switch since there is no buffer at index %s yet" index)))

(defhydra hydra-bswitch (:hint nil :exit t)
  "
%(bswitch-get-header-display-line)
%(bswitch-get-buffer-display-line 1)
%(bswitch-get-buffer-display-line 2)
%(bswitch-get-buffer-display-line 3)
%(bswitch-get-buffer-display-line 4)
%(bswitch-get-buffer-display-line 5)
%(bswitch-get-buffer-display-line 6)
%(bswitch-get-buffer-display-line 7)
%(bswitch-get-buffer-display-line 8)
"
  ("a" (bswitch-switch 1))
  ("o" (bswitch-switch 2))
  ("e" (bswitch-switch 3))
  ("u" (bswitch-switch 4))
  ("h" (bswitch-switch 5))
  ("t" (bswitch-switch 6))
  ("n" (bswitch-switch 7))
  ("s" (bswitch-switch 8)))

(global-set-key (kbd "M-B") #'hydra-bswitch/body)
#+END_SRC
* Evil?

#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :disabled t
  :demand
  :init (evil-mode t)
  :config
  (setq evil-find-skip-newlines t)
  ;; I stole this from Mike
  ;; Redefine evil bindings to make more sense on Dvorak. I want to define my
  ;; own, as evil-dvorak didn't use the same keys I wanted to setup.
  ;; (define-key evil-normal-state-map "d" 'evil-backward-char) ;
  ;; (define-key evil-normal-state-map "h" 'evil-next-line)
  ;; (define-key evil-normal-state-map "t" 'evil-previous-line)
  ;; (define-key evil-visual-state-map "n" 'evil-forward-char)
  ;; (define-key evil-visual-state-map "d" 'evil-backward-char)
  ;; (define-key evil-visual-state-map "h" 'evil-next-line)
  ;; (define-key evil-visual-state-map "t" 'evil-previous-line)
  ;; (define-key evil-normal-state-map "n" 'evil-forward-char)
  ;; (define-key evil-normal-state-map "k" 'evil-delete)
  ;; (define-key evil-visual-state-map "k" 'evil-delete)
  ;; (define-key evil-normal-state-map "K" 'evil-delete-line)
  ;; (define-key evil-normal-state-map "j" 'evil-find-char-to)
  ;; (define-key evil-normal-state-map "J" 'evil-find-char-to-backward)
  ;; (define-key evil-motion-state-map "l" 'evil-search-next)
  ;; (define-key evil-motion-state-map "L" 'evil-search-previous)
  ;; (define-key evil-normal-state-map "gj" 'evil-join)
  (use-package evil-leader
    :ensure t
    :init (global-evil-leader-mode)
    :config
    (evil-leader/set-leader ",")
    (evil-leader/set-key
      ;; NOTE evil-leader/set-key-for-mode only works for major modes
      ;; Flycheck
      "e"  'flycheck-next-error
      "E"  'flycheck-previous-error
      ;; Org, while a major mode, I want these available all the time
      "oa" 'org-agenda
      "oc" 'org-capture
      ;; Dired
      "d"  'dired-jump
      ;; Commenting
      "ci" 'evilnc-comment-or-uncomment-lines
      "cp" 'evilnc-comment-or-uncomment-paragraphs
      "cr" 'comment-or-uncomment-region
      "cl" 'comment-indent
      ;; Helm
      "a"  'helm-apropos
      "k"  'helm-descbinds
      "m"  'helm-man-woman
      "x"  'helm-M-x
      "f"  'helm-find-files
      "y"  'helm-show-kill-ring
      "b"  'helm-buffers-list)
    ;; org-mode specific keybindings
    (evil-leader/set-key-for-mode 'org-mode
      "cp" 'org-set-property)
    ;; dired-mode specific keybindings
    (evil-leader/set-key-for-mode 'dired-mode
      "ch"  'wdired-change-to-wdired-mode)))
#+END_SRC
