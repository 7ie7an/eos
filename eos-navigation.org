#+TITLE: EOS: Navigation
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+PROPERTY: header-args:sh :eval no

#+BEGIN_SRC emacs-lisp
(provide 'eos-navigation)
#+END_SRC

* General Emacs Navigation

These are miscellaneous bindings used all over the place that don't
really fit in anywhere else.

First, some window management and navigation helpers

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x +") 'balance-windows-area)

(global-set-key (kbd "C-c y") 'bury-buffer)
(global-set-key (kbd "C-c r") 'revert-buffer)

;; ==== Window switching ====
(defun eos/other-window-backwards ()
  (interactive)
  (other-window -1))

(global-set-key (kbd "M-'") #'other-window)
(global-set-key (kbd "M-\"") #'eos/other-window-backwards)
(global-set-key (kbd "H-'") #'other-window)
(global-set-key (kbd "H-\"") #'eos/other-window-backwards)
(global-set-key (kbd "<C-tab>") #'other-window)
(global-set-key (kbd "C-x C-o") #'other-window)
#+END_SRC

If you split buffers and have A on the left and B on the right, this will put B
on the left and A on the right. I actually use this more than I thought I
would...

#+BEGIN_SRC emacs-lisp
(defun transpose-buffers (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
            (next-win (window-buffer (funcall selector))))
        (set-window-buffer (selected-window) next-win)
        (set-window-buffer (funcall selector) this-win)
        (select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

(global-set-key (kbd "C-x 4 t") 'transpose-buffers)
#+END_SRC

Next, some of the random bindings that I use that don't really fit elsewhere.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-l") 'toggle-truncate-lines)

;; join on killing lines
(defun kill-and-join-forward (&optional arg)
  "If at end of line, join with following; otherwise kill line.
Deletes whitespace at join."
  (interactive "P")
  (if (and (eolp) (not (bolp)))
      (delete-indentation t)
    (kill-line arg)))

(global-set-key (kbd "C-k") 'kill-and-join-forward)

;; join line to next line
(global-set-key (kbd "M-j")
                (lambda ()
                  (interactive)
                  (join-line -1)))

;; Completion that uses many different methods to find options.
(global-set-key (kbd "M-/") 'hippie-expand)

;; Font size
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C--") 'text-scale-decrease)

;; Start or switch to eshell
(global-set-key (kbd "C-x C-m") 'eshell)

;; If you want to be able to M-x without meta (phones, etc)
(global-set-key (kbd "C-c C-x") 'execute-extended-command)
#+END_SRC

** Isearch bindings

#+BEGIN_SRC emacs-lisp
;; Use regex searches by default.
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)

;; Activate occur easily inside isearch
(define-key isearch-mode-map (kbd "C-o")
  (lambda () (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string (regexp-quote isearch-string))))))

(defun eos/add-watchword (string)
  "Highlight whatever `string' is in the current buffer
permanently."
  (font-lock-add-keywords
   nil `((,(if isearch-regexp isearch-string (regexp-quote isearch-string))
          1 '((:background "yellow") (:weight bold)) t))))

(define-key isearch-mode-map (kbd "M-h")
  (lambda () (interactive)
    (eos/add-watchword
     (if isearch-regexp isearch-string (regexp-quote isearch-string)))))
#+END_SRC

* God-mode
God-mode was always something a little strange to me, halfway to =evil-mode=,
but not quite Emacs.

Lately though, I've begun using it because it allows me to do things I spend a
lot of time doing (navigating) without hitting control. This is especially
helpful because while I don't suffer from the so-called "Emacs-pinky", I am
instead suffering from "Emacs-thumb".

#+BEGIN_SRC emacs-lisp
(use-package god-mode
  :ensure t
  :init
  (god-mode)
  (global-set-key (kbd "<escape>") 'god-mode-all)
  (define-key god-local-mode-map (kbd ".") 'repeat)
  (define-key god-local-mode-map (kbd "i") 'god-local-mode)
  (defun god-update-cursor ()
    "Update my cursor."
    (setq cursor-type
          (if god-local-mode
              'box
            'bar)))
  (add-hook 'god-mode-enabled-hook 'god-update-cursor)
  (add-hook 'god-mode-disabled-hook 'god-update-cursor)
  (add-to-list 'god-exempt-major-modes 'sauron-mode)
  (add-to-list 'god-exempt-major-modes 'eshell-mode)
  (add-to-list 'god-exempt-major-modes 'org-agenda-mode)
  (add-to-list 'god-exempt-major-modes 'mingus-playlist-mode)
  (add-to-list 'god-exempt-major-modes 'mingus-browse-mode)
  (add-to-list 'god-exempt-major-modes 'twittering-mode)
  :config
  ;; Finally, a fix for key-translation-map by redefining the
  ;; `key-string-after-consuming-key' method, courtesy of
  ;; https://github.com/chrisdone/god-mode/issues/75
  (defun key-string-after-consuming-key (key key-string-so-far)
    "Interpret god-mode special keys for key (consumes more keys if
 appropriate). Append to keysequence."
    (let ((key-consumed t) next-modifier next-key)
      (message key-string-so-far)
      (setq next-modifier
            (cond
             ((string= key god-literal-key)
              (setq god-literal-sequence t)
              "")
             (god-literal-sequence
              (setq key-consumed nil)
              "")
             ((and
               (stringp key)
               (not (eq nil (assoc key god-mod-alist)))
               (not (eq nil key)))
              (cdr (assoc key god-mod-alist)))
             (t
              (setq key-consumed nil)
              (cdr (assoc nil god-mod-alist))
              )))
      (setq next-key
            (if key-consumed
                (god-mode-sanitized-key-string (read-event key-string-so-far))
              key))

      (let* ((next-literal-key-string (concat next-modifier next-key))
             (translation (lookup-key key-translation-map
                                      (read-kbd-macro next-literal-key-string t)))
             (next-interpreted-key-string
              (if translation
                  (format-kbd-macro translation)
                next-literal-key-string)))

        (if key-string-so-far
            (concat key-string-so-far " " next-interpreted-key-string)
          next-interpreted-key-string)))))
#+END_SRC
