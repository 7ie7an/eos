#+TITLE: EOS: Emacs Appearance
#+AUTHOR: Lee Hinman
#+EMAIL: lee@writequit.org
#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+PROPERTY: header-args:sh :eval no
#+HTML_HEAD: <link rel="stylesheet" href="https://dakrone.github.io/org2.css" type="text/css" />
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t
#+OPTIONS: skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP: fold nodlcheck lognotestate content

#+BEGIN_SRC emacs-lisp
(provide 'eos-appearance)
#+END_SRC

* Determining whether this will be a "light" or "dark" session
:PROPERTIES:
:VISIBILITY: all
:CUSTOM_ID: light-or-dark
:END:
First, let's determine whether I'm going to be using a dark background, or a
light background. I set a var to either '=light= or '=dark= depending on
whatever I'm in the mood for. This is used later on for the modeline theme, as
well as the general theme for look-and-feel things.

#+BEGIN_SRC emacs-lisp
;;(defvar eos/background 'light)
(defvar eos/background 'dark)

;; On thulcandra (my laptop), I need a light background for being outside and in
;; very bright locations while having a lower brightness setting
(when (equal (system-name) "thulcandra")
  (setq eos/background 'light))
#+END_SRC

* Emacs Appearance
:PROPERTIES:
:CUSTOM_ID: appearance
:END:

Beacon flashes the cursor whenever you adjust position, really helpful when
jumping between a billion windows and having no idea where the cursor actually
is. It's currently disabled because it causes a bit of CPU churn that I don't
really need.

#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :disabled t
  :diminish beacon-mode
  :init (beacon-mode 1)
  :config
  (add-to-list 'beacon-dont-blink-major-modes 'eshell-mode))
#+END_SRC

Paren-face adds a face for parentheses, which is used by themes to darken the
parens.

#+BEGIN_SRC emacs-lisp
(use-package paren-face
  :ensure t
  :init (global-paren-face-mode))
#+END_SRC

* Color Theme
:PROPERTIES:
:CUSTOM_ID: color-theme
:END:
If using OSX, the colors and fonts look a bit wonky, so let's fix that

#+BEGIN_SRC emacs-lisp
(setq ns-use-srgb-colorspace t)
;; Anti-aliasing
(setq mac-allow-anti-aliasing t)
#+END_SRC

For light-colored backgrounds, I used [[https://github.com/fniessen/emacs-leuven-theme][leuven-theme]]. For dark-colored backgrounds
(most of the time), I use the tomorrow-night theme, which I find to be a good
balanced of color and pleasing to my eyes.

#+BEGIN_SRC emacs-lisp
(if (eq eos/background 'dark)
    (progn
      ;; (install-pkgs '(tao-theme))
      ;; (load-theme 'tao-yin t)
      (use-package color-theme-sanityinc-tomorrow
        :ensure t
        :init (load-theme 'sanityinc-tomorrow-night t)))
  (progn
    (install-pkgs '(tao-theme))
    (load-theme 'tao-yang t)
    (use-package punpun-theme
      :ensure t
      :disabled t
      :init (load-theme 'punpun-light t))
    (use-package leuven-theme
      :ensure t
      :disabled t
      :init (load-theme 'leuven t))))
#+END_SRC

* Fonts
:PROPERTIES:
:CUSTOM_ID: fonts
:END:
I've been using [[https://github.com/belluzj/fantasque-sans][Fantasque Sans Mono]] lately, it looks pretty nice to me. On Linux
I've been using Bitstream Vera Sans Mono. I also use [[http://www.marksimonson.com/fonts/view/anonymous-pro][Anonymous Pro]] and
Inconsolata a lot.

** Config for OSX:
:PROPERTIES:
:CUSTOM_ID: osx
:END:

#+BEGIN_SRC emacs-lisp
(defun eos/setup-osx-fonts ()
  (when (eq system-type 'darwin)
    (set-default-font "Bitstream Vera Sans Mono")
    (set-face-attribute 'default nil :height 120)
    (set-face-attribute 'fixed-pitch nil :height 120)))

(when (eq system-type 'darwin)
  (add-hook 'after-init-hook #'eos/setup-osx-fonts))
#+END_SRC

** Config for Linux/X11 systems:
:PROPERTIES:
:CUSTOM_ID: linux
:END:

#+BEGIN_SRC emacs-lisp
(defun eos/setup-x11-fonts ()
  (when (eq window-system 'x)
    ;; default font and variable-pitch fonts
    (if (equal (system-name) "ivalice")
        (progn
          ;; Ivalice has a big monitor, the text needs to be bigger
          (set-face-attribute 'default nil :family "Hack" :height 145)
          (set-face-attribute 'variable-pitch nil
                              :family "DejaVu Sans" :height 145))
      (set-face-attribute 'default nil :family "Hack" :height 115)
      (set-face-attribute 'variable-pitch nil :family "DejaVu Sans" :height 115))
    ;; font for all unicode characters
    (set-fontset-font t 'unicode "DejaVu Sans Mono" nil 'prepend)))

(when (eq window-system 'x)
  (add-hook 'after-init-hook #'eos/setup-x11-fonts))
#+END_SRC

** Experimental test of Greg's extended-faces package
:PROPERTIES:
:CUSTOM_ID: h:4ec2fb0e-19b0-4751-9422-3df7da548a62
:END:

#+BEGIN_SRC emacs-lisp
;; (when (file-exists-p "~/src/elisp/emacs-extended-faces/")
;;   (add-to-list 'load-path "~/src/elisp/emacs-extended-faces/")
;;   (require 'extended-faces)
;;   (diminish 'buffer-face-mode))
#+END_SRC

* Emacs' Mode-line
:PROPERTIES:
:CUSTOM_ID: modeline
:END:

Hmm... there are two real "useful" additions here, either smart mode line, or
spaceline

** smart-mode-line

sml is great, but I did some profiling and it was eating a lot of
responsiveness, so I go back and forth with it.

#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :ensure t
  :disabled t
  :init
  (if (eq eos/background 'dark)
      (setq sml/theme eos/background)
    (setq sml/theme 'light))
  (sml/setup)
  :config
  (setq sml/shorten-directory t
        sml/shorten-modes t)
  (add-to-list 'sml/replacer-regexp-list '("^~/es/x-plugins/" ":X:"))
  (add-to-list 'sml/replacer-regexp-list '("^~/es/elasticsearch/" ":ES:") t))
#+END_SRC

** spaceline

This is the modeline built into spacemacs, but a separate package. Worth a try, anyway...

#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :disabled t
  :init
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (spaceline-helm-mode)
  (use-package info+
    :ensure t
    :init
    (spaceline-info-mode))
  (use-package fancy-battery
    :ensure t
    :init
    (add-hook 'after-init-hook #'fancy-battery-mode)))
#+END_SRC

* Highlighting the current line with hl-line-mode

I turn this on and off all over the place, so it's nice to have a global place
where I can have it defined/handled.

First, a flag for whether it's enabled, if set to =nil=, then even if
hl-line-mode is "turned on" it won't be turned on. This allows me to manage
enabling it in a single place.

#+BEGIN_SRC emacs-lisp
(setq eos/hl-line-enabled t)
#+END_SRC

Then two functions to do the turning on/off

#+BEGIN_SRC emacs-lisp
(defun eos/turn-on-hl-line ()
  (interactive)
  (when eos/hl-line-enabled
    (hl-line-mode 1)))

(defun eos/turn-off-hl-line ()
  (interactive)
  (hl-line-mode -1))
#+END_SRC

Turn it on by default (if enabled!) in prog-mode

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'eos/turn-on-hl-line)
#+END_SRC

* The Editor Fringe
:PROPERTIES:
:CUSTOM_ID: fringe
:END:

So, fringe is nice actually, I set it to the same color as the background so it
blends into the foreground

#+BEGIN_SRC emacs-lisp
(defun eos/set-fringe-background ()
  "Set the fringe background to the same color as the regular background."
  (setq eos/fringe-background-color
        (face-background 'default))
  (custom-set-faces
   `(fringe ((t (:background ,eos/fringe-background-color))))))

(add-hook 'after-init-hook #'eos/set-fringe-background)
#+END_SRC

Show where the buffer ends on the right-hand fringe

#+BEGIN_SRC emacs-lisp
(setq-default indicate-buffer-boundaries 'right)
#+END_SRC

* Shift the color of text with Redshift
:PROPERTIES:
:CUSTOM_ID: redshift
:END:

Redshift is like Flux, but nicer.

#+BEGIN_SRC conf :tangle out/redshift.service
[Unit]
Description=Redshift

[Service]
Type=simple
ExecStart=/usr/bin/redshift -l geoclue2 -t 6500:3700
ExecStop=/usr/bin/pkill redshift
Environment=DISPLAY=:0
Restart=always

[Install]
WantedBy=default.target
#+END_SRC

#+BEGIN_SRC sh :tangle sh/install-redshift.sh
deb-install redshift
rpm-install redshift
ln -sfv $PWD/out/redshift.service ~/.config/systemd/user/redshift.service
systemctl --user daemon-reload
systemctl --user enable redshift
systemctl --user start redshift
#+END_SRC

* Variable width font hacks
:PROPERTIES:
:CUSTOM_ID: variable-width-fonts
:END:

So, variable font width is really nice in GUI emacs, with org-mode however,
almost all of my source blocks don't look that great without a fixed-width font
(as well as tables, verbatim, etc).

So, there is a way to hack around thing. This relies on a custom patch to
org-mode that looks like:

#+BEGIN_SRC diff :tangle no
diff --git a/lisp/org-faces.el b/lisp/org-faces.el
index 941a604..abc646c 100644
--- a/lisp/org-faces.el
+++ b/lisp/org-faces.el
@@ -537,6 +537,9 @@ follows a #+DATE:, #+AUTHOR: or #+EMAIL: keyword."
   "Face used for the line delimiting the end of source blocks."
   :group 'org-faces)

+(defface org-block-background '((t ()))
+  "Face used for the source block background.")
+
 (defface org-verbatim
   (org-compatible-face 'shadow
     '((((class color grayscale) (min-colors 88) (background light))
diff --git a/lisp/org.el b/lisp/org.el
index af68539..b2c8309 100644
--- a/lisp/org.el
+++ b/lisp/org.el
@@ -5932,6 +5932,15 @@ by a #."
              (cond
               ((and lang (not (string= lang "")) org-src-fontify-natively)
                (org-src-font-lock-fontify-block lang block-start block-end)
+               ;; remove old background overlays
+               (mapc (lambda (ov)
+                       (if (eq (overlay-get ov 'face) 'org-block-background)
+                           (delete-overlay ov)))
+                     (overlays-at (/ (+ beg1 block-end) 2)))
+               ;; add a background overlay
+               (setq ovl (make-overlay beg1 block-end))
+                (overlay-put ovl 'face 'org-block-background)
+                (overlay-put ovl 'evaporate t) ; make it go away when empty
                (add-text-properties beg1 block-end '(src-block t)))
               (quoting
                (add-text-properties beg1 (min (point-max) (1+ end1))

#+END_SRC

To re-add support for the =org-block-background= face that was removed in 8.3+.

Then, you can do something like this:

#+BEGIN_SRC emacs-lisp
(when (and window-system
           ;; Only if I have a custom patched org-mode
           (file-exists-p "~/src/elisp/org-mode"))
  (add-hook 'org-mode-hook 'variable-pitch-mode)
  (add-hook 'markdown-mode-hook 'variable-pitch-mode)

  (defun eos/adjoin-to-list-or-symbol (element list-or-symbol)
    (let ((list (if (not (listp list-or-symbol))
                    (list list-or-symbol)
                  list-or-symbol)))
      (require 'cl-lib)
      (cl-adjoin element list)))

  ;; Fontify certain org things with fixed-width
  (eval-after-load "org"
    '(mapc
      (lambda (face)
        (set-face-attribute
         face nil
         :inherit
         (eos/adjoin-to-list-or-symbol
          'fixed-pitch
          (face-attribute face :inherit))))
      (list 'org-code 'org-block 'org-table 'org-block-background
            'org-verbatim 'org-formula 'org-macro)))

  ;; Fontify certain markdown things with fixed-width
  (eval-after-load "markdown-mode"
    '(mapc
      (lambda (face)
        (set-face-attribute
         face nil
         :inherit
         (eos/adjoin-to-list-or-symbol
          'fixed-pitch
          (face-attribute face :inherit))))
      (list 'markdown-pre-face 'markdown-inline-code-face))))
#+END_SRC

Great credit for this goes to [[https://yoo2080.wordpress.com/2013/05/30/monospace-font-in-tables-and-source-code-blocks-in-org-mode-proportional-font-in-other-parts/][this blog post.]]

* Rainbow delimiters (but not the way you think)
This is instead used to highlight unmatching parens and the like, lovingly taken
from
http://timothypratley.blogspot.ru/2015/07/seven-specialty-emacs-settings-with-big.html

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  :config
  (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                      :foreground 'unspecified
                      :inherit 'error))
#+END_SRC

* Custom colors in buffer-local faces

So, I really like using a theme that uses something like [[https://github.com/ankurdave/color-identifiers-mode][color-identifiers-mode]],
but it's just too many colors when using a regular theme (which is why I was
originally using tao-theme for it since it's monochromatic).

The thing is, I'd like to have things monochrome where color-identifiers works
and have regular highlighting on modes where it doesn't. This unfortunately
requires that the face be buffer-local, so I need a tool to do that.

#+BEGIN_SRC emacs-lisp
(defun eos/make-local-face (face-name &rest args)
  "Make a buffer face local"
  (interactive)
  (let ((local-face (intern (concat (symbol-name face-name) "-local"))))
    ;; First create new face which is a copy of the old face
    (copy-face face-name local-face)
    (apply 'set-face-attribute local-face nil args)
    (set (make-local-variable face-name) local-face)))
#+END_SRC

Now, we can use that setting to modify a bunch of things before
color-identifiers-mode is activated. In this case, however, only before
java-mode applies the color-identifiers configuration.

#+BEGIN_SRC emacs-lisp
(use-package color-identifiers-mode
  :ensure t
  :init
  (defun eos/turn-on-color-identifiers ()
    (interactive)
    (let ((faces '(;; font-lock-comment-face
                   ;; font-lock-comment-delimiter-face
                   font-lock-constant-face
                   font-lock-type-face
                   font-lock-function-name-face
                   font-lock-variable-name-face
                   ;; font-lock-keyword-face
                   ;; font-lock-string-face
                   ;; font-lock-builtin-face
                   font-lock-preprocessor-face
                   font-lock-warning-face
                   font-lock-doc-face)))
      (dolist (face faces)
        (eos/make-local-face face :foreground nil))
      (eos/make-local-face 'font-lock-keyword-face :foreground nil :weight 'bold)
      (eos/make-local-face 'font-lock-builtin-face :foreground nil :weight 'bold)
      (color-identifiers-mode 1)))
  (add-hook 'java-mode-hook #'eos/turn-on-color-identifiers)
  (add-hook 'emacs-lisp-mode-hook #'color-identifiers-mode))
#+END_SRC
