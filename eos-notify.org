#+TITLE: EOS: Notification Module
#+AUTHOR: Lee Hinman
#+EMAIL: lee@writequit.org
#+LANGUAGE: en
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+PROPERTY: header-args:sh :eval no
#+HTML_HEAD: <link rel="stylesheet" href="https://dakrone.github.io/org2.css" type="text/css" />
#+EXPORT_EXCLUDE_TAGS: noexport
#+OPTIONS: H:4 num:nil toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t
#+OPTIONS: skip:nil d:(HIDE) tags:not-in-toc
#+STARTUP: fold nodlcheck lognotestate content

#+BEGIN_SRC emacs-lisp
(provide 'eos-notify)
#+END_SRC

* A Word about Notifications and Alerting

Yep. I need to actually make this work for OSX, for Linux it's no problem
though.

#+BEGIN_SRC emacs-lisp
(use-package alert
  :ensure t
  :config
  (when (eq system-type 'darwin)
    (setq alert-default-style 'notifier))
  (when (eq system-type 'gnu/linux)
    (setq alert-default-style 'notifications)))
#+END_SRC

To use this, I just need to do =(alert "this is a message")=.

The all-seeing eye of Sauron

#+BEGIN_SRC emacs-lisp
(use-package sauron
  :ensure t
  :init
  (setq sauron-max-line-length 120
        sauron-watch-patterns '("dakrone" "thnetos" "okenezak")
        sauron-watch-nicks '("dakrone" "thnetos")
        sauron-nick-insensitivity 20
        sauron-frame-geometry "120x36+0+0")
  ;; filter out IRC spam
  (defun tsp/hide-irc-user-spam (origin priority msg &optional properties)
    (or (string-match "^*** Users" msg)))
  (defun tsp/hide-tweet-counts (origin priority msg &optional properties)
    (or (string-match "^[0-9]+ new tweets" msg)))
  (add-hook 'sauron-event-block-functions #'tsp/hide-irc-user-spam)
  (add-hook 'sauron-event-block-functions #'tsp/hide-tweet-counts)

  (sauron-start-hidden)
  ;; Need to stop tracking notifications, because sauron will be sending notifications!
  (sauron-notifications-stop)
  (add-hook 'sauron-event-added-functions 'sauron-alert-el-adapter)
  :commands (sauron-toggle-hide-show)
  :bind ("M-o" . sauron-toggle-hide-show)
  :config
  ;; Add the unread sauron notification count to the modeline
  ;;(add-to-list 'global-mode-string '(cdr (sauron-count-events)))

  (defun eos/compilation-finish (buffer msg)
    "Send a sauron notification for compilation completing"
    (interactive)
    (sauron-add-event 'compilation
                      3
                      (format "[%s]: %s" buffer msg)
                      (lambda () (switch-to-buffer-other-window "*compilation*"))
                      nil))
  (add-to-list 'compilation-finish-functions #'eos/compilation-finish)

  (defun finish ()
    "Generic function for signaling something is \"done\"."
    (interactive)
    (sauron-add-event major-mode
                      3
                      (concat "Finished command in " (buffer-name))
                      (lambda () (switch-to-buffer-other-window (buffer-name)))
                      nil)))
#+END_SRC
