#+TITLE: EOS: Development Module
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+PROPERTY: header-args:sh :eval no

#+BEGIN_SRC emacs-lisp
(provide 'eos-develop)
#+END_SRC

* EOS Development Module Configuration
Let's make .zsh also be a shell script

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.zsh$" . shell-script-mode))
#+END_SRC

This contains the configuration for elisp programming

Remove some back-ends from vc-mode, no need to check all these things, I use
=magit= for everything anyway:

#+BEGIN_SRC emacs-lisp
(setq vc-handled-backends '(git svn))
#+END_SRC

I need to hide the lighter for subword mode:

#+BEGIN_SRC emacs-lisp
(use-package subword
  :diminish subword-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package log4j-mode
  :ensure t
  :init
  (add-hook #'log4j-mode-hook #'view-mode)
  (add-hook #'log4j-mode-hook #'read-only-mode)
  (add-hook #'log4j-mode-hook #'hl-line-mode))
#+END_SRC

I have to hack something around this to make it fixed for org->html exports

#+BEGIN_SRC emacs-lisp
(use-package fill-column-indicator
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'fci-mode)
  :config
  ;; fix for org -> html export
  (defun fci-mode-override-advice (&rest args))
  (use-package org)
  (advice-add 'org-html-fontify-code :around
              (lambda (fun &rest args)
                (advice-add 'fci-mode :override #'fci-mode-override-advice)
                (let ((result  (apply fun args)))
                  (advice-remove 'fci-mode #'fci-mode-override-advice)
                  result))))
#+END_SRC

Highlight idle things, but only in certain modes

#+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
  :ensure t
  :init
  (add-hook 'java-mode-hook #'idle-highlight-mode)
  (add-hook 'emacs-lisp-mode-hook #'idle-highlight-mode)
  (add-hook 'clojure-lisp-mode-hook #'idle-highlight-mode))
#+END_SRC

Hide-show is kind of like Vim's folding, but manually done right now.

I'm in the process of trying out [[https://github.com/gregsexton/origami.el][Origami]] as a replacement, since it's a bit
easier on the brain and has nicer functions (supposedly), however, Origami is
much slower than hideshow for large buffers.

#+BEGIN_SRC emacs-lisp
(use-package hideshow
  :bind (("C-c TAB" . hs-toggle-hiding)
         ("C-\\" . hs-toggle-hiding)
         ("M-\\" . hs-hide-all)
         ("M-+" . hs-show-all))
  :init (add-hook #'prog-mode-hook #'hs-minor-mode)
  :diminish hs-minor-mode
  :config
  (defvar hs-special-modes-alist
    (mapcar 'purecopy
            '((c-mode "{" "}" "/[*/]" nil nil)
              (c++-mode "{" "}" "/[*/]" nil nil)
              (bibtex-mode ("@\\S(*\\(\\s(\\)" 1))
              (java-mode "{" "}" "/[*/]" nil nil)
              (js-mode "{" "}" "/[*/]" nil)
              (javascript-mode  "{" "}" "/[*/]" nil)))))
#+END_SRC

Uses =M-n= and =M-p= to jump between the same variable in multiple places

#+BEGIN_SRC emacs-lisp
(use-package smartscan
  :ensure t
  :init (add-hook #'prog-mode-hook #'smartscan-mode)
  :config
  (bind-key "M-'" #'other-window smartscan-map)
  (setq smartscan-symbol-selector "symbol"))
#+END_SRC

There is also some additional configuration that we may want to enable, let's do
that with additional highlighting modes.

First, highlight numbers in a "special" way, so they stick out:

#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'highlight-numbers-mode))
#+END_SRC

Also highlight quoted symbols in a nice way.

#+BEGIN_SRC emacs-lisp
(use-package highlight-quoted
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'highlight-quoted-mode))
#+END_SRC

Also highlight pre-defined symbols in elisp

#+BEGIN_SRC emacs-lisp
(use-package highlight-defined
  :ensure t
  :init
  (add-hook 'emacs-lisp-hook #'highlight-defined-mode))
#+END_SRC

Finally, let's highlight escape sequences in a better way also

#+BEGIN_SRC emacs-lisp
(use-package highlight-escape-sequences
  :ensure t
  :init
  (add-hook 'prog-mode-hook #'hes-mode))
#+END_SRC

** Semantic Editing
First, use a development version of cedet if applicable, I download the latest
snapshot from http://www.randomsample.de/cedet-snapshots/ and extract it in
~/src/elisp. Don't forget to run =make= in it!

And then things to set up semantic mode

#+BEGIN_SRC emacs-lisp
(defun eos/setup-semantic-mode ()
  (interactive)
  (use-package semantic
    :init
    (require 'semantic/ia)
    (require 'semantic/wisent)
    (semantic-mode t)))

(add-hook 'c-mode-hook #'eos/setup-semantic-mode)
(add-hook 'java-mode-hook #'eos/setup-semantic-mode)
#+END_SRC

** Emacs' Built In Electric Modes (pair/indent/layout)
Emacs finally has better support for automatically doing things like indentation
and pairing parentheses. So, let's enable (some) of that

First, stuff for automatically inserting pairs of characters:

#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
(setq electric-pair-preserve-balance t
      electric-pair-delete-adjacent-pairs t
      electric-pair-open-newline-between-pairs nil)
(show-paren-mode 1)
#+END_SRC

Now, how about some auto-indentation:

#+BEGIN_SRC emacs-lisp
(electric-indent-mode 1)

;; Ignore electric indentation for python and yaml
(defun electric-indent-ignore-mode (char)
  "Ignore electric indentation for python-mode"
  (if (or (equal major-mode 'python-mode)
          (equal major-mode 'yaml-mode))
      'no-indent
    nil))
(add-hook 'electric-indent-functions 'electric-indent-ignore-mode)
#+END_SRC

Finally, perhaps we want some automatic layout:

#+BEGIN_SRC emacs-lisp
(electric-layout-mode 1)
#+END_SRC


** Programming Mode Hooks

In programming modes, make sure things like FIXME and TODO are
highlighted so they stand out:

#+BEGIN_SRC emacs-lisp
(defun eos/add-watchwords ()
  "Highlight FIXME, TODO, and NOCOMMIT in code TODO"
  (font-lock-add-keywords
   nil '(("\\<\\(FIXME:?\\|TODO:?\\|NOCOMMIT:?\\)\\>"
          1 '((:foreground "#d7a3ad") (:weight bold)) t))))

(add-hook 'prog-mode-hook #'eos/add-watchwords)
#+END_SRC

Also highlight the line in prog-mode:

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'hl-line-mode)
#+END_SRC
* Autocomplete with Company

I use =company= for more than just programming completions (see ðŸ’•=company-emoji=ðŸ’•, f.e.), so let's
just enable it everywhere.

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package company
  :ensure t
  :diminish company-mode
  ;; stupid flyspell steals the binding I really want, `C-.`
  :bind (("C-c ." . company-complete)
         ("C-." . company-complete))
  :init
  (add-hook 'after-init-hook #'global-company-mode)
  (use-package company-quickhelp
    :ensure t
    :init (add-hook 'company-mode-hook #'company-quickhelp-mode))
  :config
  (setq company-selection-wrap-around t
        ;; don't automatically start completion
        company-idle-delay nil
        ;; don't downcase dabbrev suggestions
        company-dabbrev-downcase nil
        ;; sort completions by occurrence
        company-transformers '(company-sort-by-occurrence))
  (bind-keys :map company-active-map
             ("C-n" . company-select-next)
             ("C-p" . company-select-previous)
             ("C-d" . company-show-doc-buffer)
             ("C-l" . company-show-location)
             ("<tab>" . company-complete)))
#+END_SRC

Used smart-tab to complete everywhere except for ERC, shell and mu4e.

#+BEGIN_SRC emacs-lisp
(use-package smart-tab
  :ensure t
  :defer t
  :diminish ""
  :init (global-smart-tab-mode 1)
  :config
  (progn
    (add-to-list 'smart-tab-disabled-major-modes 'mu4e-compose-mode)
    (add-to-list 'smart-tab-disabled-major-modes 'erc-mode)
    (add-to-list 'smart-tab-disabled-major-modes 'shell-mode)))
#+END_SRC

* Managing Projects with Projectile
Per-project navigation

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer 5
  :commands projectile-global-mode
  :diminish projectile-mode
  :init (add-hook 'after-init-hook #'projectile-global-mode)
  :config
  (bind-key "C-c p b" #'projectile-switch-to-buffer #'projectile-command-map)
  (bind-key "C-c p K" #'projectile-kill-buffers #'projectile-command-map)

  ;; global ignores
  (add-to-list 'projectile-globally-ignored-files ".tern-port")
  (add-to-list 'projectile-globally-ignored-files "GTAGS")
  (add-to-list 'projectile-globally-ignored-files "GPATH")
  (add-to-list 'projectile-globally-ignored-files "GRTAGS")
  (add-to-list 'projectile-globally-ignored-files "GSYMS")
  (add-to-list 'projectile-globally-ignored-files ".DS_Store")
  ;; always ignore .class files
  (add-to-list 'projectile-globally-ignored-file-suffixes ".class")
  (use-package helm-projectile
    :ensure t
    :init
    (use-package helm-ag
      :ensure t)
    (use-package grep) ;; required for helm-ag to work properly
    (setq projectile-completion-system 'helm)
    ;; no fuzziness for projectile-helm
    (setq helm-projectile-fuzzy-match nil)
    (helm-projectile-on)))
#+END_SRC

* Git Magit with Magit and friends
I use =M-g M-g= everywhere to go directly to Magit.

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("M-g M-g" . magit-status)
         ("C-x g" . magit-status))
  :init (add-hook 'magit-mode-hook 'hl-line-mode)
  :config
  (setenv "GIT_PAGER" "")
  (if (file-exists-p  "/usr/local/bin/emacsclient")
      (setq magit-emacsclient-executable "/usr/local/bin/emacsclient")
    (setq magit-emacsclient-executable (executable-find "emacsclient")))
  (defun eos/magit-browse ()
    "Browse to the project's github URL, if available"
    (interactive)
    (let ((url (with-temp-buffer
                 (unless (zerop (call-process-shell-command
                                 "git remote -v" nil t))
                   (error "Failed: 'git remote -v'"))
                 (goto-char (point-min))
                 (when (re-search-forward
                        "github\\.com[:/]\\(.+?\\)\\.git" nil t)
                   (format "https://github.com/%s" (match-string 1))))))
      (unless url
        (error "Can't find repository URL"))
      (browse-url url)))

  (define-key magit-mode-map (kbd "C-c C-b") #'eos/magit-browse)
  ;; Magit has its own binding, so re-bind them
  (bind-key "M-1" #'eos/create-or-switch-to-eshell-1 magit-mode-map)
  (bind-key "M-2" #'eos/create-or-switch-to-eshell-2 magit-mode-map)
  (bind-key "M-3" #'eos/create-or-switch-to-eshell-3 magit-mode-map)
  (bind-key "M-4" #'eos/create-or-switch-to-eshell-4 magit-mode-map))
#+END_SRC

Quite useful, as well as the =C-x n= and =C-x p= bindings.

#+BEGIN_SRC emacs-lisp
(use-package git-gutter
  :ensure t
  :defer t
  :bind (("C-x =" . git-gutter:popup-hunk)
         ("C-c P" . git-gutter:previous-hunk)
         ("C-c N" . git-gutter:next-hunk)
         ("C-x p" . git-gutter:previous-hunk)
         ("C-x n" . git-gutter:next-hunk)
         ("C-c G" . git-gutter:popup-hunk))
  :diminish ""
  :init
  (add-hook 'prog-mode-hook #'git-gutter-mode)
  (add-hook 'org-mode-hook #'git-gutter-mode))
#+END_SRC

Ediff is fantastic for looking through diffs

#+BEGIN_SRC emacs-lisp
(use-package ediff
  :config
  (progn
    (setq
     ;; Always split nicely for wide screens
     ediff-split-window-function 'split-window-horizontally)))
#+END_SRC

* Flycheck - Syntax Checking On The Fly

Pretty minimally configured, but awesome tool for most dynamic languages.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :defer 5
  :bind (("M-g M-n" . flycheck-next-error)
         ("M-g M-p" . flycheck-previous-error)
         ("M-g M-=" . flycheck-list-errors))
  :init (global-flycheck-mode)
  :diminish flycheck-mode
  :config
  (progn
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc json-jsonlint json-python-json))
    (use-package flycheck-pos-tip
      :ensure t
      :init (flycheck-pos-tip-mode))
    (use-package helm-flycheck
      :ensure t
      :init (define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck))
    (use-package flycheck-haskell
      :ensure t
      :init (add-hook 'flycheck-mode-hook #'flycheck-haskell-setup))))
#+END_SRC

* Elisp
:PROPERTIES:
:ID:       5AA7C6BC-6DAD-45D9-ABD5-36BF0BD344F1
:CUSTOM_ID: 8711a5dd-fbbd-452c-bc18-85318d9c9c9b
:END:
This contains the configuration for elisp programming

First, turn on paredit and eldoc everywhere it's useful:

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :commands paredit-mode
  :diminish "()"
  :init
  (add-hook 'emacs-lisp-mode-hook #'paredit-mode)
  (add-hook 'ielm-mode-hook #'paredit-mode)
  :config
  (bind-key "M-)" #'paredit-forward-slurp-sexp paredit-mode-map)
  (bind-key "C-(" #'paredit-forward-barf-sexp paredit-mode-map)
  (bind-key "C-)" #'paredit-forward-slurp-sexp paredit-mode-map)
  (bind-key ")" #'paredit-close-parenthesis paredit-mode-map)
  (bind-key "M-\"" #'my/other-window-backwards paredit-mode-map))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package eldoc
  :diminish eldoc-mode
  :init
  (add-hook 'emacs-lisp-mode-hook #'eldoc-mode)
  (add-hook 'ielm-mode-hook #'eldoc-mode)
  :config
  (setq eldoc-idle-delay 0.3))
#+END_SRC

Define some niceties for popping up an ielm buffer:

#+BEGIN_SRC emacs-lisp
(defun ielm-other-window ()
  "Run ielm on other window"
  (interactive)
  (switch-to-buffer-other-window
   (get-buffer-create "*ielm*"))
  (call-interactively 'ielm))

(define-key emacs-lisp-mode-map (kbd "C-c C-z") 'ielm-other-window)
(define-key lisp-interaction-mode-map (kbd "C-c C-z") 'ielm-other-window)
#+END_SRC

Turn on elisp-slime-nav if available, so =M-.= works to jump to function
definitions:

#+BEGIN_SRC emacs-lisp
(use-package elisp-slime-nav
  :ensure t
  :diminish elisp-slime-nav-mode
  :init (add-hook 'emacs-lisp-mode-hook #'elisp-slime-nav-mode))
#+END_SRC

Borrowed from Steve Purcell's config. This pretty-prints the results.

#+begin_src emacs-lisp
(bind-key "M-:" #'pp-eval-expression)

(defun eos/eval-last-sexp-or-region (prefix)
 "Eval region from BEG to END if active, otherwise the last sexp."
 (interactive "P")
 (if (and (mark) (use-region-p))
 (eval-region (min (point) (mark)) (max (point) (mark)))
 (pp-eval-last-sexp prefix)))

(bind-key "C-x C-e" 'eos/eval-last-sexp-or-region emacs-lisp-mode-map)

(define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
#+end_src

* Python
:PROPERTIES:
:ID:       772D69FD-48DB-4A5C-B107-06CD508CAE05
:CUSTOM_ID: 651c592a-1ac5-4282-8bcb-ca696c4013bd
:END:
Some various python settings, including loading jedi if needed to set up
keys, the custom hook only loads jedi when editing python files:

#+BEGIN_SRC emacs-lisp
(use-package python
  :defer t
  :config
  (define-key python-mode-map (kbd "<backtab>") 'python-back-indent))
#+END_SRC

I'm using the [[https://github.com/porterjamesj/virtualenvwrapper.el][virtualenvwrapper]] package for managing these

#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
  :ensure t
  :defer t
  :init
  (progn
    (venv-initialize-interactive-shells)
    (venv-initialize-eshell)
    (setq venv-location (or (getenv "WORKON_HOME")
                            "~/.venvs"))))
#+END_SRC


* Ruby
Using rbenv, set it up correctly when idle

#+BEGIN_SRC emacs-lisp
(use-package rbenv
  :ensure t
  :defer 25
  :init
  ;; I don't really care about the active ruby in the modeline
  (setq rbenv-show-active-ruby-in-modeline nil)
  (global-rbenv-mode t))
#+END_SRC

* Haskell
Use GHC for haskell mode, and turn on auto-complete and some doc/indent
modes:

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t
  :defer t
  :init
  (add-hook 'haskell-mode-hook #'haskell-indentation-mode)
  (add-hook 'haskell-mode-hook #'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook #'subword-mode)
  (add-hook 'haskell-mode-hook #'interactive-haskell-mode)
  :config
  (setq haskell-process-suggest-remove-import-lines t
        haskell-process-auto-import-loaded-modules t
        haskell-process-log t
        haskell-process-type 'auto)
  (define-key haskell-mode-map (kbd "C-c C-l") #'haskell-process-load-or-reload)
  (define-key haskell-mode-map (kbd "C-`") #'haskell-interactive-bring)
  (define-key haskell-mode-map (kbd "C-c t") #'haskell-process-do-type)
  (define-key haskell-mode-map (kbd "C-c C-i") #'haskell-process-do-info)
  ;;(define-key haskell-mode-map (kbd "C-c C-c") #'haskell-process-cabal-build)
  (define-key haskell-mode-map (kbd "C-c C-k") #'haskell-interactive-mode-clear)
  ;;(define-key haskell-mode-map (kbd "C-c c") #'haskell-process-cabal)
  (define-key haskell-mode-map (kbd "SPC") #'haskell-mode-contextual-space))
#+END_SRC

* Javascript
I want indentation of 2 for json/js.

#+BEGIN_SRC emacs-lisp
(setq-default js-indent-level 2)
#+END_SRC

Bleh javascript. js2-mode is better than nothing.

#+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :ensure t
  :mode "\\.js\\'"
  :config (js2-imenu-extras-setup))
#+END_SRC

There's =tern= also, but I leave it turned off by default, just installed

#+BEGIN_SRC emacs-lisp
(use-package tern
  :ensure t)
#+END_SRC
