#+TITLE: EOS: Clojure Development Module
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+PROPERTY: header-args:sh :eval no

#+BEGIN_SRC emacs-lisp
(provide 'eos-clojure)
#+END_SRC

* Clojure
Things for Clojure development, which I do a lot of.

#+BEGIN_SRC emacs-lisp
(defun my/clojure-things-hook ()
  "Set up clojure-y things"
  (eldoc-mode 1)
  (subword-mode t)
  (paredit-mode 1)
  (global-set-key (kbd "C-c t") 'clojure-jump-between-tests-and-code))

(use-package clojure-mode
  :ensure t
  :init
  (add-hook #'clojure-mode-hook #'my/clojure-things-hook))
#+END_SRC

Let's define a couple of helper functions for setting up the cider and
ac-nrepl packages:

#+BEGIN_SRC emacs-lisp
(defun my/setup-cider ()
  (interactive)
  (setq cider-history-file "~/.nrepl-history"
        cider-hide-special-buffers t
        cider-repl-history-size 10000
        cider-prefer-local-resources t
        cider-popup-stacktraces-in-repl t)
  (paredit-mode 1)
  (eldoc-mode 1))
#+END_SRC

And then finally use them if cider and ac-nrepl packages are available:

#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t
  :defer 30
  :init
  (add-hook #'cider-mode-hook #'my/setup-cider)
  (add-hook #'cider-repl-mode-hook #'my/setup-cider)
  (add-hook #'cider-mode-hook #'my/clojure-things-hook)
  (add-hook #'cider-repl-mode-hook #'my/clojure-things-hook)
  (use-package ac-cider
    :ensure t
    :init
    (add-hook #'cider-mode-hook #'ac-flyspell-workaround)
    (add-hook #'cider-mode-hook #'ac-cider-setup)
    (add-hook #'cider-repl-mode-hook #'ac-cider-setup)))
#+END_SRC
